
# keywords:
	from		import		as

	goto		label

	if			else		end
	repeat		for			in			while
	then		do
	switch      case        default
	
	break       continue

	var         val         let         ref
	def         yield       return

	type        untype
	class       self        new

	T			F			N

	public		private

# need design keywords:
	struct		space

# annotations form:
	'@' [a-zA-Z]+

	@public
	@private

# operations:
	[		left bracket
	]		right bracket

	+		add
	-		sub
	*		mul
	/		div

	%		mod
	//		true div
	**		exp

	&		bitwise and
	|		bitwise or
	^		bitwise xor
	~		bitwise not

	>>		shift right
	<<		shift left

	=		assign
	=>		ref assign

	==		equal
	!=		not equal
	<		less than
	<=		less than equal
	>		greater than
	>=		greater than equal

	&&		and
	||		or
	^^		xor
	!		not

	+=		add assign
	-=		sub assign
	*=		mul	assign
	/=		div assign

	%=		mod assign
	//=		true div assign
	**=		exp assign

	&=		bitwise and assign
	|=		bitwise or assign
	^=		bitwise xor assign

	>>=		shift right assign
	<<=		shift left assign
